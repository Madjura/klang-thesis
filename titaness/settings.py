"""
Django settings for titaness project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = os.environ["SECRET_KEY"]
except KeyError:
    SECRET_KEY = ">GET YOUR OWN<"
# SECURITY WARNING: don't run with debug turned on in production!
try:
    DEBUG = int(os.environ["DEBUG"])
except KeyError:
    DEBUG = True
try:
    ALLOWED_HOSTS = os.environ["DJANGO_ALLOWED_HOSTS"].split(" ")
except KeyError:
    ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_celery_results",
    "celery_progress",
    "trendapp",
    "wikipediaapp",
    "indexapp",
    "klangapp",
    "dataapp",
    "spikeapp",
    "common"
]

MIDDLEWARE = [
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'titaness.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'titaness.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    "wikipedia": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "eng_wikipedia_2016_1M",
        "USER": "root",
        "PASSWORD": "password",
        "HOST": os.environ.get("TITANESS_WIKI_HOST", None) or '127.0.0.1',
        "PORT": os.environ.get("MYSQL_PORT", "3306"),
        "OPTIONS": {
            "init_command": "SET "
                            "sql_mode='STRICT_TRANS_TABLES',"
                            "CHARACTER SET utf8mb4,"
                            "NAMES utf8mb4,"
                            "character_set_connection=utf8mb4;",
            'charset': 'utf8mb4',
        },

    }
}
DATABASE_ROUTERS = ["titaness.routers.WikipediaRouter"]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/


#### NEW STUFF
# STATIC_URL = os.environ.get('DJANGO_STATIC_URL', '/static/')
STATIC_URL = os.environ.get("DJANGO_STATIC_URL", "/titaness/staticfiles/")
# STATIC_ROOT = os.path.join(BASE_DIR, "static_root")
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]
#### NEW STUFF END

DEBUG_TOOLBAR_PANELS = (
    "debug_toolbar.panels.versions.VersionsPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.logging.LoggingPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
    "debug_toolbar.panels.profiling.ProfilingPanel",
)

DATA_DIR = os.environ.get("DATA_DIR_PATH", ">SET DIR<")

L1_PATH = os.path.join("thesaurus", "models", "products", "l1")
L2_PATH = os.path.join("thesaurus", "models", "products", "l2")
PRODUCTS_MODEL_PATH = os.path.join("thesaurus", "models", "products")


MEDIA_URL = "/titaness/mediafiles/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

# CELERY_RESULT_BACKEND = 'django-db'
# CELERY_CACHE_BACKEND = 'django-cache'
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", 'redis://localhost:6379')
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", 'redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

TWITTER_KEY = ">GET YOUR OWN<"
TWITTER_SECRET = ">GET YOUR OWN<"
TWITTER_ACCESS_TOKEN = ">GET YOUR OWN<"
TWITTER_ACCESS_TOKEN_SECRET = ">GET YOUR OWN<"

if 'DJANGO_FORCE_SCRIPT_NAME' in os.environ:
    FORCE_SCRIPT_NAME = os.environ.get('DJANGO_FORCE_SCRIPT_NAME')
